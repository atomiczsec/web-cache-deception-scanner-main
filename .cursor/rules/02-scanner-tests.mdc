---
description: 
globs: 
alwaysApply: true
---
# Scanner Tests

The Web Cache Deception Scanner performs several types of tests to detect potential vulnerabilities. These tests are implemented in [RequestSender.java](mdc:src/main/java/burp/RequestSender.java).

## Initial Path Mapping Check

- Method: [initialTest](mdc:src/main/java/burp/RequestSender.java#249)
- Purpose: Verifies that the backend ignores trailing path segments, a prerequisite for web cache deception
- Checks if `/originalpath` and `/originalpath/randomXYZ` return similar content

## Delimiter + Extension Cache Test

- Method: [testDelimiterExtension](mdc:src/main/java/burp/RequestSender.java#329)
- Purpose: Checks if adding different delimiters and file extensions causes caching
- Tests combinations like `/originalpath/random.js`, `/originalpath;random.css`, etc.

## Path Normalization Cache Test

- Method: [testNormalizationCaching](mdc:src/main/java/burp/RequestSender.java#392)
- Purpose: Tests if the cache normalizes paths differently from the backend
- Uses path traversal patterns like `%2f%2e%2e%2f` (encoded `/../`)

## Self-Referential Normalization Test

- Method: [testSelfReferentialNormalization](mdc:src/main/java/burp/RequestSender.java#1064)
- Purpose: Tests if the cache normalizes self-referential paths that may lead to cache poisoning
- Checks paths with intermediate segments that might be normalized differently

## Response Similarity Analysis

- Methods: [testSimilar](mdc:src/main/java/burp/RequestSender.java#685)
- Purpose: Compares authenticated and unauthenticated responses to detect potential caching
- Uses Jaro-Winkler and Levenshtein distance for similarity measurement
